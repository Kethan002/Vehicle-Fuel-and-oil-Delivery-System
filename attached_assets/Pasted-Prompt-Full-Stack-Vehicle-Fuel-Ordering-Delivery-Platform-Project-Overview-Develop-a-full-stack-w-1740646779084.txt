Prompt: Full-Stack Vehicle Fuel Ordering & Delivery Platform
Project Overview
Develop a full-stack web application that allows vehicle owners to order fuels, diesel, and other vehicle-related oils from sellers who provide these products. The platform should enable seamless transactions, real-time order tracking, and user reviews, similar to food delivery apps like "Zomato," but tailored for vehicle fuel and oil orders.

Here's a *detailed explanation* of each feature to give clear development instructions to the software developer:  

---
KEY FEATURES
## *1. User Features (Vehicle Owners)*  

### *1.1 Authentication*  
Users should be able to register and log in using three methods:  
- *Email & Password:* Standard authentication where users enter an email and password.  
- *Mobile OTP:* Users can log in via a one-time password (OTP) sent to their mobile number.  
- *Google Sign-in:* Users can log in using their Google account for quicker access.  

### *1.2 Browse & Search*  
- Users should be able to *search for sellers* based on their location.  
- The system should display a list of sellers offering fuel, diesel, and oils.  
- Filters should allow users to refine results by fuel type, price, rating, and distance.  

### *1.3 Product Listing*  
- Each seller will have a *profile page* displaying their available products.  
- Each product should include:  
  - *Product Name* (e.g., Diesel, Engine Oil)  
  - *Price per unit (liter/kg/etc.)*  
  - *Availability* (In stock or Out of stock)  
  - *Estimated Delivery Time*  

### *1.4 Ordering System*  
- Users should be able to:  
  - Select *product quantity*  
  - Schedule an order for *immediate delivery or a future date*  
  - Confirm purchase and receive an *order confirmation message*  
- Payment Method: *Cash on Delivery (COD) only*  

### *1.5 Order Tracking*  
- The system should use *GPS tracking* to show:  
  - Seller’s location  
  - Order status updates (*Order Placed → Seller Accepted → Out for Delivery → Delivered*)  
  - Estimated delivery time updates based on real-time location  

### *1.6 Reviews & Ratings*  
- After order completion, users can:  
  - *Rate the seller* (1 to 5 stars)  
  - *Leave a written review*  
- Sellers should be able to view their *average rating* on their profile.  

### *1.7 Order History*  
- Users can see a *history of their past orders* with details like:  
  - Ordered products  
  - Total amount  
  - Seller details  
  - Order status  
- Users should be able to *reorder* previous purchases with one click.  

### *1.8 Dark Mode & Custom Themes*  
- Users can switch between *light mode & dark mode* for accessibility.  
- Option to select from *multiple UI themes* to personalize the experience.  

---

## *2. Seller Features*  

### *2.1 Authentication*  
- Sellers should be able to *register and log in* using:  
  - Email & password  
  - Mobile OTP  
  - Google sign-in  

### *2.2 Dashboard*  
- A *centralized seller dashboard* to manage:  
  - Orders (pending, accepted, rejected, delivered)  
  - Inventory (products & stock levels)  
  - Earnings (daily, weekly, and monthly reports)  

### *2.3 Product Management*  
- Sellers can:  
  - *Add new products* (fuel, diesel, oils)  
  - *Update product details* (price, availability, description)  
  - *Remove products* if they are no longer available  

### *2.4 Order Management*  
- Sellers can:  
  - *Accept or reject orders*  
  - *Update order status* (Accepted, Out for Delivery, Delivered)  
  - *Cancel an order* if necessary  

### *2.5 Delivery Tracking*  
- Sellers should be able to see:  
  - *User’s location* to optimize delivery routes  
  - *Live updates* on order status  
  - A *map view* of active deliveries  

### *2.6 Customer Reviews*  
- Sellers should be able to:  
  - *View customer ratings & feedback*  
  - *Respond to reviews* to address concerns or thank customers  

---

## *3. Admin Features*  

### *3.1 User & Seller Management*  
- The admin should have *full control over users and sellers*, including:  
  - *Approving, suspending, or removing sellers* (in case of violations)  
  - *Managing users* (handling complaints, resetting passwords)  

### *3.2 Order Monitoring*  
- The admin should be able to:  
  - *Monitor all transactions* between users and sellers  
  - *View order disputes* (e.g., undelivered orders, complaints)  
  - *Resolve payment or delivery issues*  

### *3.3 Analytics Dashboard*  
- Admins should have access to analytics, including:  
  - *Total orders placed*  
  - *Top-performing sellers*  
  - *User activity trends*  
  - *Customer satisfaction metrics*  

---

Technology Stack

Frontend (User & Seller Dashboards)
Framework: React.js with Next.js (for SEO, SSR, and performance)
UI Library: Tailwind CSS (for minimal, customizable UI with dark mode)
State Management: Redux Toolkit or React Context
Routing: Next.js API routes or React Router
Location Tracking: Google Maps API / OpenStreetMap for real-time tracking

Backend (APIs & Database)
Framework: Node.js with Express.js
Database: PostgreSQL (for structured data) + Redis (for caching)
Authentication: Firebase Auth (for easy login) or JWT with bcrypt
Real-time Updates: Socket.io (for order status & live tracking)
Geolocation API: Google Maps API for seller & user locations

Payment Method
Cash on Delivery (COD) only – Users confirm orders and pay upon delivery.

Hosting & Deployment
Frontend: Vercel (for free & fast Next.js deployment)
Backend: Railway / Render (for free Node.js hosting)
Database: Supabase (PostgreSQL with API) or Neon (PostgreSQL)
Storage: Firebase Storage or Cloudinary (for product images)


User Flow & Experience
User Flow (Vehicle Owners)
Register/Login → Enter Location → Browse Sellers → Add Products to Cart → Confirm Order (COD) → Order Tracking → Delivery Confirmation → Review Seller

Seller Flow
Register/Login → Set Up Store → Add Products → Manage Orders → Track Deliveries → View Earnings & Reviews

Admin Flow
Manage Users & Sellers → Monitor Orders → View Reports & Analytics